#include <SPI.h>
#include <mcp2515.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

struct can_frame canMsg1; 
MCP2515 mcp2515(10);

uint8_t data_count = 0;
char Data[4]; // if i use uint8_t(Byte) or int8_t(char) cause distortion 
char s_Data[4];
int Pass_speed = atoi(Data);
const byte ROWS= 4;
const byte COLS = 4;
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3, A3};
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
LiquidCrystal_I2C lcd(0x27, 16, 2);
volatile char customKey;
int curr_s = 6;

void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);
lcd.init();
lcd.backlight();
lcd.setCursor(0, 0);
lcd.print("current:");
lcd.setCursor(0, 1);
lcd.print("Input:");
lcd.setCursor(8, 0);

mcp2515.reset();
mcp2515.setBitrate(CAN_100KBPS, MCP_8MHZ);
mcp2515.setNormalMode();
}

void loop() {
  // put your main code here, to run repeatedly:
customKey = customKeypad.getKey();
if(customKey == 'A'){
  lcd.setCursor(8,0);
  lcd.print(atoi(s_Data));
  strcpy(Data, s_Data);
  }
else if(customKey == 'B'){
  lcd.clear();
  curr_s = 6;
  clearData();
  lcd.setCursor(0, 0);
  lcd.print("current:");
  lcd.setCursor(0, 1);
  lcd.print("Input:");
  }
else if(customKey == 'C' || customKey == 'D' || customKey == '*'||customKey == '#'){
  Serial.println("Unauthorised");
  }
else if(customKey == '1' || customKey == '2' ||customKey == '3' ||customKey == '4' ||
customKey == '5' ||customKey == '6' ||customKey == '7' ||customKey == '8' ||
customKey == '9' ||customKey == '0'){
  s_Data[data_count]=customKey;
  lcd.setCursor(curr_s, 1);
  lcd.print(s_Data[data_count]);
  data_count++;
  curr_s++;
  if(curr_s > 9){curr_s = 9;}
  if(data_count > 4){data_count = 3;}
  }
  Serial.println("fuck");
  Serial.println(canMsg1.data[0]);
  Serial.println(canMsg1.data[1]);
  Serial.println(canMsg1.data[2]);
  Serial.println(canMsg1.data[3]);
  canMsg1.can_id  = 0x036;
  canMsg1.can_dlc = 4;
  canMsg1.data[0] = (uint8_t)Data[0];
  canMsg1.data[1] = (uint8_t)Data[1];
  canMsg1.data[2] = (uint8_t)Data[2];
  canMsg1.data[3] = (uint8_t)Data[3];
  mcp2515.sendMessage(&canMsg1);
}

void clearData()
{
  while (data_count != 0)
  { 
    s_Data[data_count--] = 0; 
  }
  return;
}
